// This is a FlatBuffers schema.
// See https://google.github.io/flatbuffers/
namespace sieve_ir;

// ==== Message types that can be exchanged. ====
// Ref. SIEVE-IR spec (1.)
union Message {
   Relation,
   Instance,
   Witness,
}

// The 'version' field should match the following regexp "^\d+.\d+.\d+$"
// The 'field_characteristic' should be prime, and stored little-endian byte-oriented vector
// The 'field_degree' should be '1'. No other value is actually supported.
// Ref. SIEVE-IR spec (3.1)
table Header {
   version              :string;
   fields               :[Value];
}

table Relation {
   header               :Header;
   functions            :[Function];
   directives           :[Directive];
}
// Ref. SIEVE-IR spec (3.2)
table Instance {
   header               :Header;
   common_inputs        :[Inputs];
}
// Ref. SIEVE-IR spec (3.2)
table Witness {
   header               :Header;
   short_witness        :[Inputs];
}

table Inputs {
	inputs              :[Value];
}

// ==== Helper types ====

table WireId {
	id     :uint64;
}

table FieldId {
	id     :ubyte;
}

// Field element is encoded in a vector of bytes in little-endian order.
// There is no minimum or maximum length; trailing zeros may be omitted.
table Value {
    value        :[ubyte];
}

table Count {
	field_id    :FieldId;
	count       :uint64;
}

table CountList {
	elements    :[Count];
}

table Wire {
	field_id    :FieldId;
    wire_id     :WireId;
}

// first/last are inclusive
// Ref. SIEVE-IR spec (3.4)
table WireRange {
	field_id   :FieldId;
    first      :WireId;
    last       :WireId;
}

union WireListElementU {
    Wire,
    WireRange,
}
// This additional table is a workaround to the flatc compiler limitation for Rust, since it does not support the
// definition of 'vector of unions' as required for the 'WireList' type.
table WireListElement {
    element   :WireListElementU;
}

table WireList {
    elements    :[WireListElement];
}

// ==== Gate types ====

table GateConstant {
   field_id    :FieldId;
   output      :WireId;
   constant    :[ubyte];
}

table GateAssertZero {
   field_id    :FieldId;
   input       :WireId;
}

table GateCopy {
   field_id    :FieldId;
   output      :WireId;
   input       :WireId;
}

table GateAdd {
   field_id    :FieldId;
   output      :WireId;
   left        :WireId;
   right       :WireId;
}

table GateMul {
   field_id    :FieldId;
   output      :WireId;
   left        :WireId;
   right       :WireId;
}

table GateAddConstant {
   field_id    :FieldId;
   output      :WireId;
   input       :WireId;
   constant    :[ubyte];
}

table GateMulConstant {
   field_id    :FieldId;
   output      :WireId;
   input       :WireId;
   constant    :[ubyte];
}

table GateInstance {
   field_id    :FieldId;
   output      :WireId;
}

table GateWitness {
   field_id    :FieldId;
   output      :WireId;
}

table GateFree {
   field_id    :FieldId;
   // First wire ID to free.
   first       :WireId;
   // Last wire ID is optional. Free the range [first; last] inclusive.
   last        :WireId;
}

table GateConvert {
	output    :WireList;
	input     :WireList;
}

// Function declaration. The 'name' field is string matching the following pattern
//   [`a'-`z' | `A'-`Z' | `_']  [`a'-`z' | `A'-`Z' | `0'-`9' | `_']*
//   (
//       [`.' | `::']
//       [`a'-`z' | `A'-`Z' | `_']  [`a'-`z' | `A'-`Z' | `0'-`9' | `_']*
//   )*
// Ref. SIEVE-IR spec (3.5)
table Function {
    // Declare a Function gate as a custom computation
    name            :string;
    output_count    :CountList;
    input_count     :CountList;
    instance_count  :CountList;
    witness_count   :CountList;
    body            :[Directive];
}
// Invokes a previously defined Function gate
// Ref. SIEVE-IR spec (3.5)
table GateCall {
    name              :string;
    output_wires      :WireList;
    input_wires       :WireList;
}
// Defines a anonymous basic-block consisting of a list of gates.
table GateAnonCall {
    output_wires    :WireList;
    inner           :AbstractAnonCall;
}

/// The two Abstract types cannot exist by themselves in a circuit,
/// they MUST be included in another gate (For / Switch / Call / ...)
/// because they don't specify output wires, which should be specified in the
/// encompassing structure itself.
table AbstractGateCall {
    // Invokes a previously defined Function gate
    name              :string;
    input_wires       :WireList;
}
table AbstractAnonCall {
    input_wires     :WireList;
    instance_count  :CountList;
    witness_count   :CountList;
    subcircuit      :[Directive];
}

// This is the 'invocation' equivalent
// Ref. SIEVE-IR spec (3.7)
union CaseInvokeU {
    AbstractGateCall,
    AbstractAnonCall,
}
// Workaround to flatc limitation in Rust which disallows 'vector of unions'
table CaseInvoke {
    invocation  :CaseInvokeU;
}
// Ref. SIEVE-IR spec (3.7)
table GateSwitch {
	condition_field   :FieldId;
    condition_wire    :WireId;
    output_wires      :WireList;
    cases             :[Value];
    branches          :[CaseInvoke];
}

/* ========== For loop related stuff  ========== */
// Ref. SIEVE-IR spec (3.6)
union IterExpr {
    IterExprConst,
    IterExprName,
    IterExprAdd,
    IterExprSub,
    IterExprMul,
    IterExprDivConst,
}

table IterExprWireNumber { value :IterExpr;}

// Constant value in an expression
table IterExprConst { value :uint64; }
// Named loop-iteration
table IterExprName { name : string; }
// Sum of two expressions
table IterExprAdd { left :IterExprWireNumber; right :IterExprWireNumber; }
// Difference of two expressions
table IterExprSub { left :IterExprWireNumber; right :IterExprWireNumber; }
// Product of two expressions
table IterExprMul { left :IterExprWireNumber; right :IterExprWireNumber; }
// Division of an expression by a constant
table IterExprDivConst { numer :IterExprWireNumber; denom :uint64; }

table IterExprWireRange {
    first :IterExprWireNumber;
    last  :IterExprWireNumber;
}

union IterExprWireListElementU {
    IterExprWireNumber,
    IterExprWireRange,
}
table IterExprWireListElement { element: IterExprWireListElementU; }

table IterExprWireList {
    elements :[IterExprWireListElement];
}

table IterExprFunctionInvoke {
  name     :string;
  field_id :FieldId;
  outputs  :IterExprWireList;
  inputs   :IterExprWireList;
}

table IterExprAnonFunction {
  field_id         :FieldId;
  outputs          :IterExprWireList;
  inputs           :IterExprWireList;
  instance_count   :CountList;
  witness_count    :CountList;
  body             :[Directive];
}

union ForLoopBody {
  IterExprFunctionInvoke,
  IterExprAnonFunction
}

// Currently, the spec says that an iterator is identified by a string. Scoping of iterators is not explicitly detailed.
//  Issue: if a For loop uses “i” as index, and in its body, calls a function using a For loop with index “i” too,
//         things may go wrong, as during evaluation, the inner value may replace the outer one and lead to wrong
//         computation
//  Solution: Currently, For loop body is either an AnonCall, or a named Call. AnonCall can be viewed as a block,
//         where variables are inherited from outer scope, while Call can be viewed as an independent execution.
//         Therefore, the already defined indices will propagate to inner loops in case of AnonCall, but not in case
//         of a Call.
table GateFor {
  outputs     :WireList;
  iterator    :string;
  first       :uint64;
  last        :uint64;
  body        :ForLoopBody;
}

/* ========== For loop related stuff  ========== */

union DirectiveSet {
   GateConstant,
   GateAssertZero,
   GateCopy,
   GateAdd,
   GateMul,
   GateAddConstant,
   GateMulConstant,
   GateInstance,
   GateWitness,
   GateFree,
   GateConvert,
   GateCall,
   GateAnonCall,
   GateSwitch,
   GateFor,
}

table Directive {
    directive      :DirectiveSet;
}

// ==== Flatbuffers details ====

// All message types are encapsulated in the FlatBuffers root table.
table Root {
    message                 :Message;
}
root_type Root;

// When storing messages to files, this extension and identifier should be used.
file_extension "sieve";
file_identifier "siev"; // a.k.a. magic bytes.

// Message framing:
//
// All messages must be prefixed by the size of the message,
// not including the prefix, as a 4-bytes little-endian unsigned integer.
