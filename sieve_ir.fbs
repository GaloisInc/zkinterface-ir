// This is a FlatBuffers schema.
// See https://google.github.io/flatbuffers/
namespace sieve_ir;

// ==== Message types that can be exchanged. ====
// Ref. SIEVE-IR spec (1.)
union Message {
   Relation,
   PublicInputs,
   PrivateInputs,
}

// The 'version' field should match the following regexp "^\d+.\d+.\d+$"
// The 'types' should be a list of primes, and stored little-endian byte-oriented vector
// Ref. SIEVE-IR spec (3.1)
table Header {
   version              :string;
   types                :[Value];
}

table Relation {
   header               :Header;
   plugins              :[string];
   functions            :[Function];
   directives           :[Directive];
}
// Ref. SIEVE-IR spec (3.2)
table PublicInputs {
   header               :Header;
   inputs               :[Inputs];
}
// Ref. SIEVE-IR spec (3.2)
table PrivateInputs {
   header               :Header;
   inputs               :[Inputs];
}

table Inputs {
	values              :[Value];
}

// ==== Helper types ====

table WireId {
	id     :uint64;
}

table TypeId {
	id     :ubyte;
}

// Type element is encoded in a vector of bytes in little-endian order.
// There is no minimum or maximum length; trailing zeros may be omitted.
table Value {
    value        :[ubyte];
}

table Count {
	type_id    :TypeId;
	count       :uint64;
}

table CountList {
	elements    :[Count];
}

table Wire {
	type_id     :TypeId;
    wire_id     :WireId;
}

// first/last are inclusive
// Ref. SIEVE-IR spec (3.4)
table WireRange {
	type_id    :TypeId;
    first      :WireId;
    last       :WireId;
}

union WireListElementU {
    Wire,
    WireRange,
}
// This additional table is a workaround to the flatc compiler limitation for Rust, since it does not support the
// definition of 'vector of unions' as required for the 'WireList' type.
table WireListElement {
    element   :WireListElementU;
}

table WireList {
    elements    :[WireListElement];
}

// ==== Gate types ====

table GateConstant {
   type_id     :TypeId;
   output      :WireId;
   constant    :[ubyte];
}

table GateAssertZero {
   type_id     :TypeId;
   input       :WireId;
}

table GateCopy {
   type_id     :TypeId;
   output      :WireId;
   input       :WireId;
}

table GateAdd {
   type_id     :TypeId;
   output      :WireId;
   left        :WireId;
   right       :WireId;
}

table GateMul {
   type_id     :TypeId;
   output      :WireId;
   left        :WireId;
   right       :WireId;
}

table GateAddConstant {
   type_id     :TypeId;
   output      :WireId;
   input       :WireId;
   constant    :[ubyte];
}

table GateMulConstant {
   type_id     :TypeId;
   output      :WireId;
   input       :WireId;
   constant    :[ubyte];
}

table GatePublicInput {
   type_id     :TypeId;
   output      :WireId;
}

table GatePrivateInput {
   type_id     :TypeId;
   output      :WireId;
}

// To allocate in a contiguous space all wires between the first and the last inclusive.
table GateNew {
   type_id     :TypeId;
   first       :WireId;
   last        :WireId;
}

table GateDelete {
   type_id     :TypeId;
   // First wire ID to deallocate.
   first       :WireId;
   // Last wire ID is optional. Deallocate the range [first; last] inclusive.
   last        :WireId;
}

table GateConvert {
	output    :WireList;
	input     :WireList;
}

union FunctionBody {
	Gates,
	PluginBody,
}

table Gates {
	gates          :[Directive];
}

table PluginBody {
	name          :string;
	operation     :string;
	params        :[string];
}

// Function declaration. The 'name' field is string matching the following pattern
//   [`a'-`z' | `A'-`Z' | `_']  [`a'-`z' | `A'-`Z' | `0'-`9' | `_']*
//   (
//       [`.' | `::']
//       [`a'-`z' | `A'-`Z' | `_']  [`a'-`z' | `A'-`Z' | `0'-`9' | `_']*
//   )*
// Ref. SIEVE-IR spec (3.5)
table Function {
    // Declare a Function gate as a custom computation
    name            :string;
    output_count    :CountList;
    input_count     :CountList;
    public_count    :CountList;
    private_count   :CountList;
    body            :FunctionBody;
}

// Invokes a previously defined Function gate
// Ref. SIEVE-IR spec (3.5)
table GateCall {
    name              :string;
    output_wires      :WireList;
    input_wires       :WireList;
}
// Defines a anonymous basic-block consisting of a list of gates.
table GateAnonCall {
    output_wires    :WireList;
    inner           :AbstractAnonCall;
}

/// The two Abstract types cannot exist by themselves in a circuit,
/// they MUST be included in another gate (For / Call / ...)
/// because they don't specify output wires, which should be specified in the
/// encompassing structure itself.
table AbstractGateCall {
    // Invokes a previously defined Function gate
    name              :string;
    input_wires       :WireList;
}
table AbstractAnonCall {
    input_wires     :WireList;
    public_count    :CountList;
    private_count   :CountList;
    subcircuit      :[Directive];
}

union DirectiveSet {
   GateConstant,
   GateAssertZero,
   GateCopy,
   GateAdd,
   GateMul,
   GateAddConstant,
   GateMulConstant,
   GatePublicInput,
   GatePrivateInput,
   GateNew,
   GateDelete,
   GateConvert,
   GateCall,
   GateAnonCall,
}

table Directive {
    directive      :DirectiveSet;
}

// ==== Flatbuffers details ====

// All message types are encapsulated in the FlatBuffers root table.
table Root {
    message                 :Message;
}
root_type Root;

// When storing messages to files, this extension and identifier should be used.
file_extension "sieve";
file_identifier "siev"; // a.k.a. magic bytes.

// Message framing:
//
// All messages must be prefixed by the size of the message,
// not including the prefix, as a 4-bytes little-endian unsigned integer.
