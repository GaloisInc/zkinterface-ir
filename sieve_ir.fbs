// This is a FlatBuffers schema.
// See https://google.github.io/flatbuffers/

namespace sieve_ir;

// ==== Message types that can be exchanged. ====

union Message {
   Relation,
   Instance,
   Witness,
}

table Header {
   version              :string;
   profile              :string;

   field_characteristic :Value;
   field_degree         :uint32;
}

table Relation {
   header               :Header;
   gates                :[Gate];
}

table Instance {
   header               :Header;
   common_inputs        :[Value];
}

table Witness {
   header               :Header;
   short_witness        :[Value];
}


// ==== Helper types ====

struct Wire {
    id          :uint64;
}

// Field element is encoded in a vector of bytes in little-endian order.
// There is no minimum or maximum length; trailing zeros may be omitted.
table Value {
   value       :[ubyte];
}


// ==== Gate types ====

table GateConstant {
   output      :Wire;
   constant    :[ubyte];
}

table GateAssertZero {
   input       :Wire;
}

table GateCopy {
   output      :Wire;
   input       :Wire;
}

table GateAdd {
   output      :Wire;
   left        :Wire;
   right       :Wire;
}

table GateMul {
   output      :Wire;
   left        :Wire;
   right       :Wire;
}

table GateAddConstant {
   output      :Wire;
   input       :Wire;
   constant    :[ubyte];
}

table GateMulConstant {
   output      :Wire;
   input       :Wire;
   constant    :[ubyte];
}

table GateAnd {
   output      :Wire;
   left        :Wire;
   right       :Wire;
}

table GateXor {
   output      :Wire;
   left        :Wire;
   right       :Wire;
}

table GateNot {
   output      :Wire;
   input       :Wire;
}

table GateInstance {
   output      :Wire;
}

table GateWitness {
   output      :Wire;
}

table GateFree {
   // First wire ID to free.
   first       :Wire;
   // Last wire ID is optional. Free the range [first; last] inclusive.
   last        :Wire;
}

table Function {
    // declares a Function gate (as a custom gate computation)
    name        :string;
    body        :GateAnonCall;
}

table GateCall {
    // Invokes a previously defined Function gate
    name              :string;
    output_wires      :[Wire];
    input_wires       :[Wire];
}

table GateAnonCall {
    // Declares and invokes a Function gate
    output_wires    :[Wire];
    inpute_wires    :[Wire];
    instance_count  :uint64;
    witness_count   :uint64;
    directives      :[Gate];
}

union GateSet {
   GateConstant,
   GateAssertZero,
   GateCopy,
   GateAdd,
   GateMul,
   GateAddConstant,
   GateMulConstant,
   GateAnd,
   GateXor,
   GateNot,
   GateInstance,
   GateWitness,
   GateFree,
   Function,
   GateCall,
   GateAnonCall,
}
table Gate {
    gate      :GateSet;
}


// ==== Flatbuffers details ====

// All message types are encapsulated in the FlatBuffers root table.
table Root {
    message                 :Message;
}
root_type Root;

// When storing messages to files, this extension and identifier should be used.
file_extension "sieve";
file_identifier "siev"; // a.k.a. magic bytes.

// Message framing:
//
// All messages must be prefixed by the size of the message,
// not including the prefix, as a 4-bytes little-endian unsigned integer.
